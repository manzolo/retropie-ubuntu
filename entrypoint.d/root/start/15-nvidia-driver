#!/bin/bash
set -euo pipefail

# Configurazione variabili d'ambiente
NVIDIA_REPOSITORY="${NVIDIA_REPOSITORY:-ppa:graphics-drivers/ppa}"
MAX_RETRIES="${MAX_RETRIES:-3}"
RETRY_DELAY="${RETRY_DELAY:-2}"

# Configurazione logging
LOGFILE="/home/${CONTAINER_USERNAME}/ubuntu-docker.log"
exec 1> >(tee -a "$LOGFILE")
exec 2> >(tee -a "$LOGFILE" >&2)

log() {
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] NVIDIA [$$]: $*" >&2
}

error() {
    log "ERROR: $*" >&2
    exit 1
}

debug() {
    if [ "${ENTRYPOINT_DEBUG:-0}" = "1" ]; then
        log "DEBUG: $*"
    fi
}

warning() {
    log "WARNING: $*"
}

notify_user() {
    local message="$1"
    local urgency="${2:-normal}"
    local icon="${3:-info}"
    
    if command -v notify-send >/dev/null 2>&1 && [ -n "${DISPLAY:-}${WAYLAND_DISPLAY:-}" ]; then
        sudo -u "#${PUID:-1000}" notify-send -u "$urgency" -i "$icon" "NVIDIA Driver" "$message" 2>/dev/null || true
    fi
    log "$message"
}

# Cache delle versioni disponibili
AVAILABLE_VERSIONS_CACHE="/tmp/nvidia_versions_cache"
CACHE_EXPIRY_HOURS=6

ensure_nvidia_repository() {
    if ! grep -q "nvidia" /etc/apt/sources.list /etc/apt/sources.list.d/* 2>/dev/null; then
        log "Adding NVIDIA driver repository: $NVIDIA_REPOSITORY"
        if ! add-apt-repository -y "$NVIDIA_REPOSITORY" >/dev/null 2>>"$LOGFILE"; then
            warning "Failed to add NVIDIA repository ($NVIDIA_REPOSITORY), continuing with default sources"
        else
            local retry=1
            while [ $retry -le "$MAX_RETRIES" ]; do
                if apt-get update -y >/dev/null 2>>"$LOGFILE"; then
                    break
                fi
                warning "Failed to update package cache after adding repository (attempt $retry/$MAX_RETRIES)"
                log "Error details: $(cat "$LOGFILE" | tail -n 10)"
                ((retry++))
                sleep "$RETRY_DELAY"
            done
            if [ $retry -gt "$MAX_RETRIES" ]; then
                warning "Failed to update package cache after $MAX_RETRIES attempts"
            fi
        fi
    fi
}

get_available_nvidia_versions() {
    local major_version="$1"
    local package_name="libnvidia-gl-$major_version"
    local cache_file="${AVAILABLE_VERSIONS_CACHE}_${major_version}"
    
    debug "Checking cache for $package_name"
    if [ -f "$cache_file" ] && [ -s "$cache_file" ]; then
        local cache_age=$(($(date +%s) - $(stat -c %Y "$cache_file")))
        local cache_expiry=$((CACHE_EXPIRY_HOURS * 3600))
        
        if [ $cache_age -lt $cache_expiry ]; then
            debug "Using cached versions for $package_name"
            cat "$cache_file"
            return 0
        fi
    fi
    
    debug "Fetching available versions for $package_name"
    
    local retry=1
    while [ $retry -le "$MAX_RETRIES" ]; do
        if apt-get update -y >/dev/null 2>>"$LOGFILE"; then
            break
        fi
        warning "Failed to update package cache (attempt $retry/$MAX_RETRIES)"
        log "Error details: $(cat "$LOGFILE" | tail -n 10)"
        ((retry++))
        sleep "$RETRY_DELAY"
    done
    if [ $retry -gt "$MAX_RETRIES" ]; then
        warning "Failed to update package cache after $MAX_RETRIES attempts"
    fi
    
    local versions
    versions=$(apt-cache madison "$package_name" 2>>"$LOGFILE" | \
        awk '{print $3}' | \
        sort -rV | \
        head -20)
    
    if [ -n "$versions" ]; then
        echo "$versions" | tee "$cache_file"
    else
        warning "No versions found for $package_name"
        log "Error details: $(cat "$LOGFILE" | tail -n 10)"
        return 1
    fi
}

get_version_number() {
    local full_version="$1"
    echo "$full_version" | sed -nE 's/^([0-9]+(\.[0-9]+)?).*/\1/p'
}

find_best_nvidia_version() {
    local target_version="$1"
    local major_version="${2:-$(echo "$target_version" | cut -d. -f1)}"
    
    debug "Finding best version for target: $target_version, major: $major_version"
    
    local available_versions
    available_versions=$(get_available_nvidia_versions "$major_version" 2>/dev/null)
    
    if [ -z "$available_versions" ]; then
        warning "No available versions found for major version $major_version"
        return 1
    fi
    
    local exact_match
    exact_match=$(echo "$available_versions" | grep "^$target_version" | head -n1)
    if [ -n "$exact_match" ]; then
        log "Found exact version match: $exact_match"
        echo "$exact_match"
        return 0
    fi
    
    local base_version
    base_version=$(echo "$target_version" | sed -E 's/^([0-9]+\.[0-9]+).*/\1/')
    local base_match
    base_match=$(echo "$available_versions" | grep "^$base_version" | head -n1)
    if [ -n "$base_match" ]; then
        log "Found base version match: $base_match (for $base_version)"
        echo "$base_match"
        return 0
    fi
    
    local closest_version
    closest_version=$(echo "$available_versions" | head -n1)
    if [ -n "$closest_version" ]; then
        local closest_number
        closest_number=$(get_version_number "$closest_version")
        log "Using closest available version: $closest_version (driver: $closest_number)"
        echo "$closest_version"
        return 0
    fi
    
    warning "No suitable version found for $target_version"
    return 1
}

detect_host_driver_version() {
    local host_version=""
    
    local version_sources=(
        "/proc/driver/nvidia/version"
        "/sys/module/nvidia/version"
    )
    
    for source in "${version_sources[@]}"; do
        if [ -f "$source" ]; then
            debug "Checking version source: $source"
            
            local patterns=(
                's/.*Module[ \t]+([0-9]+\.[0-9]+).*/\1/p'
                's/.*version[ \t]+([0-9]+\.[0-9]+).*/\1/p' 
                's/.*([0-9]{3}\.[0-9]+).*/\1/p'
            )
            
            for pattern in "${patterns[@]}"; do
                host_version=$(sed -nE "$pattern" "$source" | head -n1)
                if [ -n "$host_version" ]; then
                    debug "Detected version $host_version using pattern $pattern from $source"
                    break 2
                fi
            done
            
            if [ -z "$host_version" ]; then
                host_version=$(awk 'NR==1 {for(i=1;i<=NF;i++) if($i ~ /^[0-9]+\.[0-9]+/) {print $i; exit}}' "$source")
                if [ -n "$host_version" ]; then
                    debug "Detected version $host_version using alternative pattern from $source"
                    break
                fi
            fi
        fi
    done
    
    if [ -z "$host_version" ] && command -v nvidia-smi >/dev/null 2>&1; then
        debug "Trying nvidia-smi as fallback"
        host_version=$(nvidia-smi --query-gpu=driver_version --format=csv,noheader,nounits 2>/dev/null | head -n1 | tr -d ' ')
        if [ -n "$host_version" ]; then
            debug "Detected version $host_version from nvidia-smi"
        fi
    fi
    
    if [ -z "$host_version" ] && command -v nvidia-settings >/dev/null 2>&1; then
        debug "Trying nvidia-settings as fallback"
        host_version=$(nvidia-settings -q NvidiaDriverVersion 2>/dev/null | grep -oE '[0-9]+\.[0-9]+' | head -n1)
        if [ -n "$host_version" ]; then
            debug "Detected version $host_version from nvidia-settings"
        fi
    fi
    
    echo "$host_version"
}

unload_nvidia_modules() {
    log "Attempting to unload NVIDIA kernel modules"
    local nvidia_modules=("nvidia" "nvidia_drm" "nvidia_modeset" "nvidia_uvm")
    for module in "${nvidia_modules[@]}"; do
        if lsmod | grep -q "^${module}\b"; then
            log "Unloading module $module"
            if ! rmmod "$module" 2>>"$LOGFILE"; then
                warning "Failed to unload module $module"
                log "Error details: $(cat "$LOGFILE" | tail -n 10)"
            else
                log "Successfully unloaded module $module"
            fi
        else
            log "Module $module not loaded"
        fi
    done
}

remove_existing_packages() {
    local existing_packages
    existing_packages=$(dpkg -l 2>/dev/null | \
        awk '$1 == "ii" && $2 ~ /^libnvidia-|nvidia-/ {print $2}' | \
        tr '\n' ' ')
    
    if [ -z "$existing_packages" ]; then
        log "No existing NVIDIA packages to remove"
        return 0
    fi
    
    log "Removing existing NVIDIA packages: $existing_packages"
    
    # Verifica file NVIDIA bloccati
    local nvidia_files=("/usr/share/nvidia/nvoptix.bin" "/usr/lib/nvidia/current/nvoptix.bin")
    for file in "${nvidia_files[@]}"; do
        if [ -f "$file" ]; then
            log "Checking processes using $file"
            local pids=""
            if command -v fuser >/dev/null 2>&1; then
                log "Using fuser to check $file"
                pids=$(fuser "$file" 2>>"$LOGFILE" || true)
            elif command -v lsof >/dev/null 2>&1; then
                log "Using lsof to check $file"
                pids=$(lsof "$file" 2>>"$LOGFILE" | awk 'NR>1 {print $2}' | sort -u || true)
            else
                warning "Neither fuser nor lsof found, skipping process check for $file"
            fi
            if [ -n "$pids" ]; then
                log "Found processes using $file: $pids"
                for pid in $pids; do
                    if [ "$pid" != "$$" ] && [ "$pid" != "1" ]; then
                        log "Attempting to terminate process $pid"
                        if kill -TERM "$pid" 2>>"$LOGFILE"; then
                            sleep 1
                            if kill -0 "$pid" 2>/dev/null; then
                                log "Process $pid still running, forcing termination"
                                kill -9 "$pid" 2>>"$LOGFILE" || true
                            fi
                        else
                            warning "Failed to terminate process $pid"
                        fi
                    else
                        warning "Skipping termination of critical PID $pid"
                    fi
                done
                sleep 2
            else
                log "No processes found using $file"
            fi
        fi
    done
    
    # Verifica e termina processi NVIDIA residui in modo selettivo
    if command -v pgrep >/dev/null 2>&1; then
        log "Checking for residual NVIDIA processes"
        local nvidia_processes=("nvidia-persistenced" "nvidia-settings" "nvidia-smi")
        local pids=""
        for proc in "${nvidia_processes[@]}"; do
            pids=$(pgrep -f "$proc" 2>>"$LOGFILE" || true)
            if [ -n "$pids" ]; then
                log "Found NVIDIA processes ($proc): $pids"
                for pid in $pids; do
                    if [ "$pid" != "$$" ] && [ "$pid" != "1" ]; then
                        log "Attempting to terminate $proc (PID $pid)"
                        if kill -TERM "$pid" 2>>"$LOGFILE"; then
                            sleep 1
                            if kill -0 "$pid" 2>/dev/null; then
                                log "Process $pid still running, forcing termination"
                                kill -9 "$pid" 2>>"$LOGFILE" || true
                            fi
                        else
                            warning "Failed to terminate $proc (PID $pid)"
                        fi
                    else
                        warning "Skipping termination of critical PID $pid for $proc"
                    fi
                done
            fi
        done
    else
        warning "pgrep not found, skipping residual NVIDIA process termination"
    fi
    
    # Scarica i moduli NVIDIA
    unload_nvidia_modules
    
    local max_attempts=5
    local attempt=1
    while [ $attempt -le "$max_attempts" ]; do
        if fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1; then
            warning "apt is locked, waiting... (attempt $attempt/$max_attempts)"
            sleep 5
            ((attempt++))
            continue
        fi
        
        log "Executing apt-get purge for: $existing_packages"
        if ! apt-get purge -y --auto-remove $existing_packages 2>>"$LOGFILE"; then
            warning "Failed to remove some NVIDIA packages: $existing_packages"
            log "Error details: $(cat "$LOGFILE" | tail -n 10)"
            # Tenta di forzare la rimozione dei file bloccati
            if [ -f "/usr/share/nvidia/nvoptix.bin" ]; then
                log "Attempting to force removal of /usr/share/nvidia/nvoptix.bin"
                rm -f /usr/share/nvidia/nvoptix.bin 2>>"$LOGFILE" || true
            fi
            return 1
        fi
        log "Successfully removed existing NVIDIA packages"
        return 0
    done
    
    warning "apt remained locked after $max_attempts attempts"
    return 1
}

install_nvidia_driver() {
    local target_version="$1"
    local major_version="$2"
    local package_name="libnvidia-gl-$major_version"
    
    log "Installing NVIDIA driver: $package_name=$target_version"
    
    export DEBIAN_FRONTEND=noninteractive
    
    if ! remove_existing_packages; then
        warning "Continuing despite package removal failure"
    fi
    
    ensure_nvidia_repository
    
    local install_attempts=(
        "$package_name=$target_version"
        "$package_name"
    )
    local retry=1
    for attempt in "${install_attempts[@]}"; do
        log "Attempting to install: $attempt"
        retry=1
        while [ $retry -le "$MAX_RETRIES" ]; do
            if apt-get install -y --no-install-recommends "$attempt" 2>>"$LOGFILE"; then
                local installed_version
                installed_version=$(dpkg -l | \
                    awk -v pkg="$package_name" '$1 == "ii" && $2 == pkg {print $3}' | \
                    head -n1)
                
                if [ -n "$installed_version" ]; then
                    log "Successfully installed: $attempt (version: $installed_version)"
                    return 0
                fi
            fi
            warning "Failed to install: $attempt (attempt $retry/$MAX_RETRIES)"
            log "Error details: $(cat "$LOGFILE" | tail -n 10)"
            ((retry++))
            sleep "$RETRY_DELAY"
        done
    done
    
    warning "Failed to install any version of $package_name"
    return 1
}

main() {
    log "Starting NVIDIA driver alignment"
    
    if [ "$(id -u)" -ne 0 ]; then
        error "This script must run as root"
    fi
    
    if fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1; then
        error "apt is locked by another process"
    fi
    
    local nvidia_mount_found=false
    for mount_path in "/usr/local/nvidia/lib" "/usr/local/nvidia/lib64" "/nvidia"; do
        if [ -d "$mount_path" ]; then
            log "Found external NVIDIA mount: $mount_path"
            echo "$mount_path" >> /etc/ld.so.conf.d/nvidia.conf
            nvidia_mount_found=true
        fi
    done
    
    if [ "$nvidia_mount_found" = true ]; then
        log "Using externally mounted NVIDIA libraries"
        ldconfig
        log "NVIDIA setup completed using mounted libraries"
        return 0
    fi
    
    if [ "${NVIDIA_SKIP_DOWNLOAD:-0}" = "1" ]; then
        debug "Skipping NVIDIA driver check (NVIDIA_SKIP_DOWNLOAD=1)"
        return 0
    fi
    
    local host_version
    host_version=$(detect_host_driver_version)
    if [[ ! "$host_version" =~ ^[0-9]+\.[0-9]+$ ]]; then
        warning "Invalid host driver version detected: $host_version"
        return 0
    fi
    
    log "Host NVIDIA driver version: $host_version"
    
    local container_version
    container_version=$(dpkg -l 2>/dev/null | \
        awk '$1 == "ii" && $2 ~ /^libnvidia-gl-/ {print $3}' | \
        sed -nE 's/^([0-9]+(\.[0-9]+)?).*/\1/p' | \
        head -n1)
    
    if [ -n "$container_version" ]; then
        log "Container NVIDIA driver version: $container_version"
        if [ "$host_version" = "$container_version" ]; then
            log "NVIDIA driver versions match - no action needed"
            return 0
        fi
    else
        log "No NVIDIA driver found in container"
    fi
    
    local major_version
    major_version=$(echo "$host_version" | cut -d. -f1)
    
    notify_user "Aligning NVIDIA driver to version $host_version" "normal" "dialog-information"
    
    local best_version
    if best_version=$(find_best_nvidia_version "$host_version" "$major_version"); then
        if install_nvidia_driver "$best_version" "$major_version"; then
            apt-get autoremove -y >/dev/null 2>>"$LOGFILE" || true
            rm -rf /var/lib/apt/lists/*
            notify_user "NVIDIA driver successfully updated to $best_version" "normal" "dialog-information"
            log "NVIDIA driver alignment completed successfully"
        else
            notify_user "Could not install NVIDIA driver version $best_version" "critical" "error"
            warning "NVIDIA driver installation failed, continuing with existing drivers"
            return 0
        fi
    else
        notify_user "Could not find compatible NVIDIA driver version" "critical" "error"
        warning "NVIDIA driver alignment failed - applications may not work correctly"
        
        log "Attempting to install generic NVIDIA driver as last resort"
        if apt-get install -y --no-install-recommends "nvidia-driver-$major_version" 2>>"$LOGFILE"; then
            local installed_version
            installed_version=$(dpkg -l | \
                awk -v pkg="nvidia-driver-$major_version" '$1 == "ii" && $2 == pkg {print $3}' | \
                head -n1)
            log "Installed generic NVIDIA driver: $installed_version"
            notify_user "Installed generic NVIDIA driver - some features may not work optimally" "normal" "dialog-warning"
        else
            notify_user "Could not install any NVIDIA driver" "critical" "error"
            warning "Failed to install any NVIDIA driver, continuing with existing drivers"
            return 0
        fi
    fi
}

cleanup() {
    rm -f "${AVAILABLE_VERSIONS_CACHE}_"* 2>/dev/null || true
}

trap cleanup EXIT
main "$@"

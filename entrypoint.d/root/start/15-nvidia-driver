#!/bin/bash
set -euo pipefail

# Configurazione variabili d'ambiente
NVIDIA_REPOSITORY="${NVIDIA_REPOSITORY:-ppa:graphics-drivers/ppa}"
MAX_RETRIES="${MAX_RETRIES:-3}"
RETRY_DELAY="${RETRY_DELAY:-2}"
LOGFILE="/home/${CONTAINER_USERNAME}/ubuntu-docker.log"
CACHE_EXPIRY_HOURS=6
AVAILABLE_VERSIONS_CACHE="/tmp/nvidia_versions_cache"

# Configurazione logging
exec 1> >(tee -a "$LOGFILE")
exec 2> >(tee -a "$LOGFILE" >&2)

log() {
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] NVIDIA [$$]: $*" >&2
}

error() {
    log "ERROR: $*" >&2
    exit 1
}

debug() {
    if [ "${ENTRYPOINT_DEBUG:-0}" = "1" ]; then
        log "DEBUG: $*"
    fi
}

warning() {
    log "WARNING: $*"
}

notify_user() {
    local message="$1"
    local urgency="${2:-normal}"
    local icon="${3:-info}"
    
    if command -v notify-send >/dev/null 2>&1 && [ -n "${DISPLAY:-}${WAYLAND_DISPLAY:-}" ]; then
        sudo -u "#${PUID:-1000}" notify-send -u "$urgency" -i "$icon" "NVIDIA Driver" "$message" 2>/dev/null || true
    fi
    log "$message"
}

ensure_nvidia_repository() {
    if ! grep -q "nvidia" /etc/apt/sources.list /etc/apt/sources.list.d/* 2>/dev/null; then
        log "Adding NVIDIA driver repository: $NVIDIA_REPOSITORY"
        if ! add-apt-repository -y "$NVIDIA_REPOSITORY" >/dev/null 2>>"$LOGFILE"; then
            warning "Failed to add NVIDIA repository ($NVIDIA_REPOSITORY), continuing with default sources"
        else
            for ((retry=1; retry<=MAX_RETRIES; retry++)); do
                if apt-get update -y >/dev/null 2>>"$LOGFILE"; then
                    break
                fi
                warning "Failed to update package cache (attempt $retry/$MAX_RETRIES)"
                sleep "$RETRY_DELAY"
            done
        fi
    fi
}

get_available_nvidia_versions() {
    local major_version="$1"
    local package_name="libnvidia-gl-$major_version"
    local cache_file="${AVAILABLE_VERSIONS_CACHE}_${major_version}"
    
    debug "Checking cache for $package_name"
    if [ -f "$cache_file" ] && [ -s "$cache_file" ]; then
        local cache_age=$(($(date +%s) - $(stat -c %Y "$cache_file")))
        local cache_expiry=$((CACHE_EXPIRY_HOURS * 3600))
        
        if [ $cache_age -lt $cache_expiry ]; then
            debug "Using cached versions for $package_name"
            cat "$cache_file"
            return 0
        fi
    fi
    
    debug "Fetching available versions for $package_name"
    for ((retry=1; retry<=MAX_RETRIES; retry++)); do
        if apt-get update -y >/dev/null 2>>"$LOGFILE"; then
            break
        fi
        warning "Failed to update package cache (attempt $retry/$MAX_RETRIES)"
        sleep "$RETRY_DELAY"
    done
    
    local versions
    versions=$(apt-cache madison "$package_name" 2>>"$LOGFILE" | awk '{print $3}' | sort -rV | head -20)
    
    if [ -n "$versions" ]; then
        echo "$versions" | tee "$cache_file"
    else
        warning "No versions found for $package_name"
        return 1
    fi
}

find_best_nvidia_version() {
    local target_version="$1"
    local major_version="${2:-$(echo "$target_version" | cut -d. -f1)}"
    
    debug "Finding best version for target: $target_version, major: $major_version"
    local available_versions=$(get_available_nvidia_versions "$major_version")
    
    if [ -z "$available_versions" ]; then
        warning "No available versions found for major version $major_version"
        return 1
    fi
    
    # Cerca una corrispondenza esatta
    local exact_match=$(echo "$available_versions" | grep "^$target_version" | head -n1)
    if [ -n "$exact_match" ]; then
        log "Found exact version match: $exact_match"
        echo "$exact_match"
        return 0
    fi
    
    # Cerca una corrispondenza base
    local base_version=$(echo "$target_version" | sed -E 's/^([0-9]+\.[0-9]+).*/\1/')
    local base_match=$(echo "$available_versions" | grep "^$base_version" | head -n1)
    if [ -n "$base_match" ]; then
        log "Found base version match: $base_match"
        echo "$base_match"
        return 0
    fi
    
    # Usa la versione piÃ¹ recente disponibile
    local closest_version=$(echo "$available_versions" | head -n1)
    if [ -n "$closest_version" ]; then
        log "Using latest available version: $closest_version"
        echo "$closest_version"
        return 0
    fi
    
    warning "No suitable version found for $target_version"
    return 1
}

detect_host_driver_version() {
    local host_version=""
    
    # Prova con nvidia-smi (metodo primario)
    if command -v nvidia-smi >/dev/null 2>&1; then
        debug "Checking NVIDIA driver version with nvidia-smi"
        host_version=$(nvidia-smi --query-gpu=driver_version --format=csv,noheader,nounits 2>>"$LOGFILE" | head -n1 | tr -d ' ' | sed -nE 's/^([0-9]+\.[0-9]+).*/\1/p')
        if [ -n "$host_version" ]; then
            debug "Detected version $host_version from nvidia-smi"
            echo "$host_version"
            return 0
        else
            debug "nvidia-smi returned empty or invalid version"
            log "nvidia-smi output: $(nvidia-smi --query-gpu=driver_version --format=csv,noheader,nounits 2>>"$LOGFILE" || true)"
        fi
    else
        debug "nvidia-smi not found or inaccessible"
    fi
    
    # Fallback su /proc/driver/nvidia/version
    if [ -f "/proc/driver/nvidia/version" ]; then
        debug "Checking NVIDIA driver version from /proc/driver/nvidia/version"
        host_version=$(sed -nE 's/.*Module[ \t]+([0-9]+\.[0-9]+).*/\1/p' "/proc/driver/nvidia/version" | head -n1)
        if [ -n "$host_version" ]; then
            debug "Detected version $host_version from /proc/driver/nvidia/version"
            echo "$host_version"
            return 0
        else
            debug "/proc/driver/nvidia/version returned empty or invalid version"
        fi
    else
        debug "/proc/driver/nvidia/version not found or inaccessible"
    fi
    
    # Fallback su /sys/module/nvidia/version
    if [ -f "/sys/module/nvidia/version" ]; then
        debug "Checking NVIDIA driver version from /sys/module/nvidia/version"
        host_version=$(cat "/sys/module/nvidia/version" | grep -oE '[0-9]+\.[0-9]+' | head -n1)
        if [ -n "$host_version" ]; then
            debug "Detected version $host_version from /sys/module/nvidia/version"
            echo "$host_version"
            return 0
        else
            debug "/sys/module/nvidia/version returned empty or invalid version"
        fi
    else
        debug "/sys/module/nvidia/version not found or inaccessible"
    fi
    
    # Fallback su nvidia-settings
    if command -v nvidia-settings >/dev/null 2>&1; then
        debug "Checking NVIDIA driver version with nvidia-settings"
        host_version=$(nvidia-settings -q NvidiaDriverVersion 2>>"$LOGFILE" | grep -oE '[0-9]+\.[0-9]+' | head -n1)
        if [ -n "$host_version" ]; then
            debug "Detected version $host_version from nvidia-settings"
            echo "$host_version"
            return 0
        else
            debug "nvidia-settings returned empty or invalid version"
        fi
    else
        debug "nvidia-settings not found or inaccessible"
    fi
    
    # Fallback su NVIDIA_MAJOR_VERSION e NVIDIA_FALLBACK_535
    if [ -n "${NVIDIA_MAJOR_VERSION:-}" ] && [ -n "${NVIDIA_FALLBACK_535:-}" ]; then
        debug "Using fallback version from NVIDIA_MAJOR_VERSION=$NVIDIA_MAJOR_VERSION and NVIDIA_FALLBACK_535=$NVIDIA_FALLBACK_535"
        host_version=$(echo "$NVIDIA_FALLBACK_535" | sed -nE 's/^([0-9]+\.[0-9]+).*/\1/p')
        if [ -n "$host_version" ]; then
            debug "Detected fallback version $host_version"
            echo "$host_version"
            return 0
        fi
    fi
    
    # Fallback su NVIDIA_FALLBACK_VERSION generico
    if [ -n "${NVIDIA_FALLBACK_VERSION:-}" ]; then
        debug "Using generic fallback version from NVIDIA_FALLBACK_VERSION=$NVIDIA_FALLBACK_VERSION"
        host_version=$(echo "$NVIDIA_FALLBACK_VERSION" | sed -nE 's/^([0-9]+\.[0-9]+).*/\1/p')
        if [ -n "$host_version" ]; then
            debug "Detected fallback version $host_version"
            echo "$host_version"
            return 0
        fi
    fi
    
    debug "No valid NVIDIA driver version detected"
    echo ""
}

check_nvidia_files() {
    local nvidia_files=("/usr/share/nvidia/nvoptix.bin" "/usr/lib/nvidia/current/nvoptix.bin")
    for file in "${nvidia_files[@]}"; do
        if [ -f "$file" ]; then
            debug "Checking processes using $file"
            local pids=""
            if command -v fuser >/dev/null 2>&1; then
                pids=$(fuser "$file" 2>>"$LOGFILE" || true)
            elif command -v lsof >/dev/null 2>&1; then
                pids=$(lsof "$file" 2>>"$LOGFILE" | awk 'NR>1 {print $2}' | sort -u || true)
            fi
            if [ -n "$pids" ]; then
                log "Found processes using $file: $pids"
                for pid in $pids; do
                    if [ "$pid" != "$$" ] && [ "$pid" != "1" ]; then
                        log "Terminating process $pid"
                        kill -TERM "$pid" 2>>"$LOGFILE" || warning "Failed to terminate process $pid"
                        sleep 1
                        if kill -0 "$pid" 2>/dev/null; then
                            log "Forcing termination of process $pid"
                            kill -9 "$pid" 2>>"$LOGFILE" || warning "Failed to force terminate process $pid"
                        fi
                    fi
                done
            fi
        fi
    done
}

remove_existing_packages() {
    local existing_packages=$(dpkg -l 2>/dev/null | awk '$1 == "ii" && $2 ~ /^libnvidia-|nvidia-/ {print $2}' | tr '\n' ' ')
    
    if [ -z "$existing_packages" ]; then
        log "No existing NVIDIA packages to remove"
        return 0
    fi
    
    log "Removing existing NVIDIA packages: $existing_packages"
    check_nvidia_files
    
    for ((attempt=1; attempt<=MAX_RETRIES; attempt++)); do
        if ! fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1; then
            if apt-get purge -y --auto-remove $existing_packages 2>>"$LOGFILE"; then
                log "Successfully removed NVIDIA packages"
                return 0
            fi
            warning "Failed to remove NVIDIA packages (attempt $attempt/$MAX_RETRIES)"
            sleep "$RETRY_DELAY"
        else
            warning "apt is locked, waiting... (attempt $attempt/$MAX_RETRIES)"
            sleep 5
        fi
    done
    warning "Failed to remove NVIDIA packages after $MAX_RETRIES attempts"
    return 1
}

install_nvidia_driver() {
    local target_version="$1"
    local major_version="$2"
    local package_name="libnvidia-gl-$major_version"
    
    log "Installing NVIDIA driver: $package_name=$target_version"
    export DEBIAN_FRONTEND=noninteractive
    
    remove_existing_packages || warning "Continuing despite package removal failure"
    ensure_nvidia_repository
    
    for ((retry=1; retry<=MAX_RETRIES; retry++)); do
        if apt-get install -y --no-install-recommends "$package_name=$target_version" 2>>"$LOGFILE"; then
            log "Successfully installed $package_name version $target_version"
            return 0
        fi
        warning "Failed to install $package_name=$target_version (attempt $retry/$MAX_RETRIES)"
        sleep "$RETRY_DELAY"
    done
    
    log "Trying generic NVIDIA driver as fallback"
    if apt-get install -y --no-install-recommends "nvidia-driver-$major_version" 2>>"$LOGFILE"; then
        log "Installed generic NVIDIA driver for major version $major_version"
        return 0
    fi
    
    warning "Failed to install any NVIDIA driver"
    return 1
}

log_system_info() {
    log "Collecting system information before container completion"
    
    # Output di nvidia-smi (eseguito una sola volta)
    if command -v nvidia-smi >/dev/null 2>&1; then
        log "Running nvidia-smi to check GPU status"
        nvidia_smi_output=$(nvidia-smi 2>>"$LOGFILE" || true)
        if [ -n "$nvidia_smi_output" ]; then
            log "nvidia-smi output:"
            while IFS= read -r line; do
                log "  $line"
            done <<< "$nvidia_smi_output"
        else
            warning "nvidia-smi returned no output"
        fi
    else
        warning "nvidia-smi not found or inaccessible"
    fi
    
    # Versione del driver installata nel container
    local container_version=$(dpkg -l 2>/dev/null | awk '$1 == "ii" && $2 ~ /^libnvidia-gl-/ {print $3}' | sed -nE 's/^([0-9]+(\.[0-9]+)?).*/\1/p' | head -n1)
    if [ -n "$container_version" ]; then
        log "Container NVIDIA driver version: $container_version"
        notify_user "Container NVIDIA driver version: $container_version" "normal" "dialog-information"
    else
        warning "No NVIDIA driver found in container"
    fi
    
    # Elenco dei dispositivi NVIDIA
    log "Listing NVIDIA devices"
    nvidia_devices=$(ls -l /dev/nvidia* 2>/dev/null || true)
    if [ -n "$nvidia_devices" ]; then
        log "NVIDIA devices found:"
        while IFS= read -r line; do
            log "  $line"
        done <<< "$nvidia_devices"
    else
        warning "No NVIDIA devices found in /dev/nvidia*"
    fi
    
    # Versione del runtime NVIDIA
    if command -v nvidia-container-cli >/dev/null 2>&1; then
        log "Checking NVIDIA container runtime version"
        nvidia_runtime_version=$(nvidia-container-cli --version 2>>"$LOGFILE" || true)
        if [ -n "$nvidia_runtime_version" ]; then
            log "NVIDIA container runtime version: $nvidia_runtime_version"
        else
            warning "nvidia-container-cli returned no version information"
        fi
    else
        warning "nvidia-container-cli not found. Consider installing nvidia-container-toolkit for advanced diagnostics."
        log "To install nvidia-container-toolkit, add to Dockerfile: 'RUN apt-get update && apt-get install -y nvidia-container-toolkit'"
    fi
    
    # Variabili d'ambiente NVIDIA
    log "NVIDIA environment variables:"
    if [ -z "${NVIDIA_MAJOR_VERSION:-}" ] || [ -z "${NVIDIA_FALLBACK_535:-}" ]; then
        warning "NVIDIA_MAJOR_VERSION or NVIDIA_FALLBACK_535 not set. Consider adding to .env file for fallback support."
        log "Example .env configuration:"
        log "  NVIDIA_MAJOR_VERSION=535"
        log "  NVIDIA_FALLBACK_535=535.247.01-0ubuntu0.24.04.1"
    fi
    log "  NVIDIA_MAJOR_VERSION=${NVIDIA_MAJOR_VERSION:-not set}"
    log "  NVIDIA_FALLBACK_535=${NVIDIA_FALLBACK_535:-not set}"
    log "  NVIDIA_FALLBACK_VERSION=${NVIDIA_FALLBACK_VERSION:-not set}"
}

main() {
    log "Starting NVIDIA driver alignment"
    
    if [ "$(id -u)" -ne 0 ]; then
        error "This script must run as root"
    fi
    
    if [ "${NVIDIA_SKIP_DOWNLOAD:-0}" = "1" ]; then
        debug "Skipping NVIDIA driver check (NVIDIA_SKIP_DOWNLOAD=1)"
        log_system_info
        return 0
    fi
    
    local host_version=$(detect_host_driver_version)
    if [[ ! "$host_version" =~ ^[0-9]+\.[0-9]+$ ]]; then
        warning "Invalid or no host driver version detected, attempting fallback installation"
        if [ -n "${NVIDIA_FALLBACK_535:-}" ]; then
            host_version=$(echo "$NVIDIA_FALLBACK_535" | sed -nE 's/^([0-9]+\.[0-9]+).*/\1/p')
            log "Using fallback version: $host_version"
        elif [ -n "${NVIDIA_FALLBACK_VERSION:-}" ]; then
            host_version=$(echo "$NVIDIA_FALLBACK_VERSION" | sed -nE 's/^([0-9]+\.[0-9]+).*/\1/p')
            log "Using generic fallback version: $host_version"
        else
            warning "No fallback version defined, skipping alignment"
            log_system_info
            return 0
        fi
    fi
    
    log "Host NVIDIA driver version: $host_version"
    
    local container_version=$(dpkg -l 2>/dev/null | awk '$1 == "ii" && $2 ~ /^libnvidia-gl-/ {print $3}' | sed -nE 's/^([0-9]+(\.[0-9]+)?).*/\1/p' | head -n1)
    if [ -n "$container_version" ] && [ "$host_version" = "$container_version" ]; then
        log "NVIDIA driver versions match - no action needed"
        log_system_info
        return 0
    fi
    
    local major_version=$(echo "$host_version" | cut -d. -f1)
    notify_user "Aligning NVIDIA driver to version $host_version" "normal" "dialog-information"
    
    local best_version=$(find_best_nvidia_version "$host_version" "$major_version")
    if [ -n "$best_version" ] && install_nvidia_driver "$best_version" "$major_version"; then
        apt-get autoremove -y >/dev/null 2>>"$LOGFILE" || true
        rm -rf /var/lib/apt/lists/*
        notify_user "NVIDIA driver successfully updated to $best_version" "normal" "dialog-information"
        log "NVIDIA driver alignment completed successfully"
    else
        notify_user "Could not install compatible NVIDIA driver" "critical" "error"
        warning "NVIDIA driver alignment failed, attempting generic driver"
        if apt-get install -y --no-install-recommends "nvidia-driver-$major_version" 2>>"$LOGFILE"; then
            local installed_version=$(dpkg -l | awk -v pkg="nvidia-driver-$major_version" '$1 == "ii" && $2 == pkg {print $3}' | head -n1)
            log "Installed generic NVIDIA driver: $installed_version"
            notify_user "Installed generic NVIDIA driver - some features may not work optimally" "normal" "dialog-warning"
        else
            notify_user "Could not install any NVIDIA driver" "critical" "error"
            warning "Failed to install any NVIDIA driver, continuing with existing drivers"
        fi
    fi
    
    log_system_info
}

cleanup() {
    rm -f "${AVAILABLE_VERSIONS_CACHE}_"* 2>/dev/null || true
}

trap cleanup EXIT
main "$@"
